import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ConditionCardService } from '../../../../core/services';
import { ConditionCard } from '../../../../core/models';
import { DataTableComponent } from '../../../../shared/components';
import { TableConfig, TableAction } from '../../../../shared/models';
import { ConditionEditDialogComponent } from '../condition-edit-dialog/condition-edit-dialog.component';
import { ConditionRelationsDialogComponent } from '../condition-relations-dialog/condition-relations-dialog.component';
import { forkJoin, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Component({
  selector: 'app-condition-list',
  templateUrl: './condition-list.component.html',
  styleUrls: ['./condition-list.component.css'],
  standalone: false
})
export class ConditionListComponent implements OnInit {
  conditions: ConditionCard[] = [];
  loading = false;

  tableConfig: TableConfig<ConditionCard> = {
    columns: [
      {
        key: 'id',
        label: 'ID',
        type: 'number',
        sortable: true,
        width: '80px'
      },
      {
        key: 'nameCondition',
        label: 'Nom',
        type: 'text',
        sortable: true,
        filterable: true
      },
      {
        key: 'description',
        label: 'Description',
        type: 'text',
        sortable: true
      },
      {
        key: 'linkedActions',
        label: 'Actions associ√©es',
        type: 'chip',
        formatter: (value: any, row: any) => `${row.actions?.length || 0} action(s)`,
        chipConfig: {
          color: 'primary',
          textColor: 'white'
        }
      },
    ],
    actions: [
      {
        key: 'manageRelations',
        label: 'G√©rer relations',
        icon: 'link',
        color: 'primary',
        tooltip: 'G√©rer les effets et actions de la condition'
      },
      {
        key: 'edit',
        label: 'Modifier',
        icon: 'edit_note',
        color: 'primary',
        tooltip: 'Modifier la condition'
      },
      {
        key: 'delete',
        label: 'Supprimer',
        icon: 'delete_forever',
        color: 'warn',
        tooltip: 'Supprimer la condition'
      }
    ],
    pagination: {
      pageSize: 10,
      pageSizeOptions: [5, 10, 25, 50],
      showFirstLastButtons: true
    },
    selection: {
      enabled: true,
      multiple: true
    },
    sorting: {
      enabled: true,
      defaultSort: {
        column: 'name',
        direction: 'asc'
      }
    },
    filtering: {
      enabled: true,
      globalFilter: true
    },
    emptyMessage: 'Aucune condition trouv√©e'
  };

  constructor(
    private conditionCardService: ConditionCardService,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    this.loadConditions();
  }

  loadConditions(): void {
    console.log('üîÑ Chargement des conditions...');
    this.loading = true;

    // Essayer d'abord l'endpoint complet
    this.conditionCardService.getAllConditionsComplete().subscribe({
      next: (conditions) => {
        console.log('‚úÖ Conditions compl√®tes charg√©es:', conditions);
        console.log('üîç D√©tail de la premi√®re condition:', conditions[0]);
        console.log('üîç Propri√©t√©s de la premi√®re condition:', Object.keys(conditions[0] || {}));

        // V√©rifier si les actions sont pr√©sentes
        conditions.forEach((condition, index) => {
          console.log(`  Condition ${index + 1} (ID: ${condition.id}):`, {
            name: condition.nameCondition,
            hasActionsProperty: 'actions' in condition,
            actionsLength: condition.actions?.length || 0,
            actionsData: condition.actions
          });
        });

        // V√©rifier que les actions sont bien charg√©es
        const totalActions = conditions.reduce((sum, condition) => sum + (condition.actions?.length || 0), 0);
        console.log(`üìä Total des actions charg√©es: ${totalActions}`);

        // Log d√©taill√© pour chaque condition
        conditions.forEach((condition, index) => {
          console.log(`üîç Condition ${index + 1} (ID: ${condition.id}): ${condition.nameCondition} - Actions: ${condition.actions?.length || 0}`);
          if (condition.actions && condition.actions.length > 0) {
            console.log(`  üìã Actions d√©taill√©es:`, condition.actions.map(a => `ID: ${a.id}`));
          }
        });

        if (totalActions > 0) {
          console.log('‚úÖ Les relations conditions-actions fonctionnent correctement !');
        } else {
          console.log('‚ÑπÔ∏è Aucune action associ√©e aux conditions pour le moment');
        }

        this.conditions = conditions;
        this.loading = false;
      },
      error: (error) => {
        console.warn('‚ö†Ô∏è Endpoint complet non disponible, fallback vers endpoint simple:', error);

        // Fallback vers l'endpoint simple + chargement des relations
        this.conditionCardService.getAllConditions().subscribe({
          next: (conditions) => {
            console.log('‚úÖ Conditions de base charg√©es:', conditions);
            this.loadConditionsWithCompleteRelations(conditions);
          },
          error: (error) => {
            console.error('‚ùå Erreur lors du chargement des conditions:', error);
            this.loading = false;
          }
        });
      }
    });
  }

  private loadConditionsWithCompleteRelations(conditions: ConditionCard[]): void {
    console.log('üîÑ Chargement des relations pour chaque condition...');

    // Charger les actions pour chaque condition en parall√®le
    const conditionObservables = conditions.map(condition => {
      console.log(`üîç Chargement des actions pour la condition ${condition.id} (${condition.nameCondition})`);
      return this.conditionCardService.getConditionActions(condition.id).pipe(
        catchError(error => {
          console.warn(`‚ö†Ô∏è Impossible de charger les actions pour la condition ${condition.id}:`, error);
          return of([]);
        }),
        map(actions => {
          console.log(`‚úÖ Actions charg√©es pour la condition ${condition.id}:`, actions);
          return {
            ...condition,
            actions: actions
          };
        })
      );
    });

    // Attendre que toutes les relations soient charg√©es
    forkJoin(conditionObservables).subscribe({
      next: (completeConditions) => {
        console.log('‚úÖ Conditions charg√©es avec relations:', completeConditions);
        console.log('üîç D√©tail des relations pour chaque condition:');
        completeConditions.forEach((condition, index) => {
          console.log(`  Condition ${index + 1} (ID: ${condition.id}):`, {
            name: condition.nameCondition,
            actions: condition.actions?.length || 0
          });
        });
        this.conditions = completeConditions;
        this.loading = false;
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement des relations:', error);
        this.loading = false;
      }
    });
  }

  onRowClick(condition: ConditionCard): void {
    console.log('Condition s√©lectionn√©e:', condition);
  }

  onSelectionChange(selectedConditions: ConditionCard[]): void {
    console.log('Conditions s√©lectionn√©es:', selectedConditions);
  }

  onPageChange(event: any): void {
    console.log('Changement de page:', event);
  }

  onSortChange(event: any): void {
    console.log('Changement de tri:', event);
  }

  onActionClick(event: { action: string; row: ConditionCard; index: number }): void {
    const { action, row } = event;

    switch (action) {
      case 'manageRelations':
        this.manageConditionRelations(row);
        break;
      case 'edit':
        this.editCondition(row);
        break;
      case 'delete':
        this.deleteCondition(row);
        break;
    }
  }

  private manageConditionRelations(condition: ConditionCard): void {
    console.log('G√©rer les relations de la condition:', condition);

    const dialogRef = this.dialog.open(ConditionRelationsDialogComponent, {
      width: '900px',
      maxHeight: '90vh',
      data: { condition: condition },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('‚úÖ Relations de la condition mises √† jour, rechargement de la liste...');
        // Attendre un peu pour que le serveur traite la mise √† jour
        setTimeout(() => {
          console.log('üîÑ Rechargement des conditions apr√®s mise √† jour des relations...');
          this.loadConditions();
        }, 1000);
      }
    });
  }

  private editCondition(condition: ConditionCard): void {
    console.log('Modifier la condition:', condition);
    this.openConditionDialog(condition);
  }

  private deleteCondition(condition: ConditionCard): void {
    if (confirm(`√ätes-vous s√ªr de vouloir supprimer la condition "${condition.nameCondition}" ?`)) {
      this.conditionCardService.deleteCondition(condition.id).subscribe({
        next: () => {
          console.log('Condition supprim√©e avec succ√®s');
          this.loadConditions();
        },
        error: (error: any) => {
          console.error('Erreur lors de la suppression:', error);
        }
      });
    }
  }

  addNewCondition(): void {
    console.log('Ajouter une nouvelle condition');
    this.openConditionDialog();
  }

  private openConditionDialog(condition?: ConditionCard): void {
    const dialogRef = this.dialog.open(ConditionEditDialogComponent, {
      width: '600px',
      maxHeight: '90vh',
      data: { condition: condition },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('Donn√©es du dialog:', result);
        this.saveCondition(result);
      }
    });
  }

  private saveCondition(conditionData: any): void {
    // Pr√©parer les donn√©es avec les relations
    const conditionRequest = {
      id: conditionData.id,
      nameCondition: conditionData.nameCondition,
      description: conditionData.description,
      actionIds: conditionData.selectedActions || []
    };

    if (conditionData.id) {
      // Modification d'une condition existante
      this.conditionCardService.updateCondition(conditionRequest).subscribe({
        next: (updatedCondition) => {
          console.log('Condition modifi√©e avec succ√®s:', updatedCondition);
          this.loadConditions();
        },
        error: (error: any) => {
          console.error('Erreur lors de la modification:', error);
        }
      });
    } else {
      // Cr√©ation d'une nouvelle condition
      this.conditionCardService.createCondition(conditionRequest).subscribe({
        next: (newCondition) => {
          console.log('Condition cr√©√©e avec succ√®s:', newCondition);
          this.loadConditions();
        },
        error: (error: any) => {
          console.error('Erreur lors de la cr√©ation:', error);
        }
      });
    }
  }
}
